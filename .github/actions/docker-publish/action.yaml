name: Docker Publish
description: Build and push Docker images with appropriate tag

inputs:
  acr_name:
    required: true
  acr_username_nonprod:
    required: false
  acr_password_nonprod:
    required: false
  acr_username_prod:
    required: false
  acr_password_prod:
    required: false
  environment:
    required: false
  image_repo:
    required: true
  image_path:
    required: true
  docker_tag:
    required: false

outputs:
  docker_tag:
    description: "Docker image tag used"
    value: ${{ steps.set-tag.outputs.docker_tag }}

runs:
  using: "composite"
  steps:
#    - name: üì• Checkout code
#      uses: actions/checkout@v4

#    - name: üì¶ Download built app artifact
#      uses: actions/download-artifact@v4
#      with:
#        name: app
#        path: app

    - name: üè∑Ô∏è Set Docker Tag
      id: set-tag
      shell: bash
      run: |
        if [ -n "${{ inputs.docker_tag }}" ]; then
          tag="${{ inputs.docker_tag }}"
        elif [ -n "$DOCKER_TAG" ]; then
          tag="$DOCKER_TAG"
        else
          formatted_branch="${GITHUB_REF_NAME//\//.}"
          tag="${formatted_branch}.${GITHUB_RUN_NUMBER}"
        fi
        echo "docker_tag=$tag" >> $GITHUB_OUTPUT
        echo "DOCKER_TAG=$tag" >> $GITHUB_ENV
        ls -lrt **
        ls -lart app/
    

    - name: üîê Login to Azure ACR
      shell: bash
      run: |
        echo "üîê Logging in to ACR..."
        echo "AZURE_CONTAINER_REGISTRY: ${{ env.AZURE_CONTAINER_REGISTRY }}"
        echo "üîê Target registry: ${{ inputs.image_repo }}"
        ENV_NAME="${{ inputs.environment }}"
        if [[ "$ENV_NAME" == prod* ]] && [ -n "${{ inputs.acr_username_prod }}" ] && [ -n "${{ inputs.acr_password_prod }}" ]; then
          echo "üîê Using production credentials"
          echo "${{ inputs.acr_password_prod }}" | docker login ${{ inputs.image_repo }} -u "${{ inputs.acr_username_prod }}" --password-stdin
        elif [ -n "${{ inputs.acr_username_nonprod }}" ] && [ -n "${{ inputs.acr_password_nonprod }}" ]; then
          echo "üîê Using non-prod credentials"
          echo "${{ inputs.acr_password_nonprod }}" | docker login ${{ inputs.image_repo }} -u "${{ inputs.acr_username_nonprod }}" --password-stdin
        else
          echo "üîê Using Azure CLI: az acr login --name ${{ inputs.acr_name }}"
          az acr login --name ${{ inputs.acr_name }}
        fi

    - name: üõ†Ô∏è Set up Docker Buildx
      id: setup-buildx
      shell: bash
      run: |
        ls -lrta
        if docker buildx version > /dev/null 2>&1; then
          echo "üõ†Ô∏è Docker Buildx is available. Setting it up..."
          docker buildx create --use --name mybuilder || true
          docker buildx inspect --bootstrap
          echo "buildx=true" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Docker Buildx not available; using standard build."
          echo "buildx=false" >> $GITHUB_ENV
        fi

    - name: üê≥ Build and Push Docker Image
      shell: bash
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: |
        echo "üì¶ Building & pushing image..."
        REPO_PATH=$(echo "${{ inputs.image_path }}" | tr '[:upper:]' '[:lower:]')
        cp -r ./app ./pipeline/docker/
        if [ ! -d app ]; then
          echo "‚ùå app folder not found. Did the build step run?"
          exit 1
        fi

        if [ "$buildx" = "true" ]; then
          docker buildx build --platform linux/amd64 \
            -t ${{ inputs.image_repo }}/$REPO_PATH:${{ env.DOCKER_TAG }} \
            -f pipeline/docker/Dockerfile --push pipeline/docker
        else
          docker build -t ${{ inputs.image_repo }}/$REPO_PATH:${{ env.DOCKER_TAG }} \
            -f pipeline/docker/Dockerfile pipeline/docker
          docker push ${{ inputs.image_repo }}/$REPO_PATH:${{ env.DOCKER_TAG }}
        fi
